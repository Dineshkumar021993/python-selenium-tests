{"name": "test_CheckDropDownInMainPage", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"key-switch\" style=\"\">...</span> is not clickable at point (1200, 263). Other element would receive the click: <div class=\"p-rel\">...</div>\n  (Session info: chrome=116.0.5845.188)\nStacktrace:\n\tGetHandleVerifier [0x00A937C3+48947]\n\t(No symbol) [0x00A28551]\n\t(No symbol) [0x0092C92D]\n\t(No symbol) [0x0095E276]\n\t(No symbol) [0x0095CF4D]\n\t(No symbol) [0x0095B74B]\n\t(No symbol) [0x0095ABA5]\n\t(No symbol) [0x00953420]\n\t(No symbol) [0x0097508C]\n\t(No symbol) [0x00952EB6]\n\t(No symbol) [0x009753E4]\n\t(No symbol) [0x009875DA]\n\t(No symbol) [0x00974E86]\n\t(No symbol) [0x009516C7]\n\t(No symbol) [0x0095284D]\n\tGetHandleVerifier [0x00CDFDF9+2458985]\n\tGetHandleVerifier [0x00D2744F+2751423]\n\tGetHandleVerifier [0x00D21361+2726609]\n\tGetHandleVerifier [0x00B10680+560624]\n\t(No symbol) [0x00A3238C]\n\t(No symbol) [0x00A2E268]\n\t(No symbol) [0x00A2E392]\n\t(No symbol) [0x00A210B7]\n\tBaseThreadInitThunk [0x76947BA9+25]\n\tRtlInitializeExceptionChain [0x77EBB79B+107]\n\tRtlClearBits [0x77EBB71F+191]", "trace": "self = <KitaabDesktop.MainPage.TestMainPage object at 0x000001D840D0E010>\n\n    @pytest.mark.order3\n    def test_CheckDropDownInMainPage(self):\n        CheckDropDownInMainPage = driver.find_element(By.XPATH, '//div[@class=\"p-dropdown-trigger\"]')\n        highlight_element(CheckDropDownInMainPage, driver)\n        CheckDropDownInMainPage.click()\n        allure.attach(driver.get_screenshot_as_png(), name=\"CheckDropDownInMainPage\",\n                      attachment_type=allure.attachment_type.PNG)\n        time.sleep(5)\n    \n        CheckItemSelectionInDropDownAndCheckToastImage = driver.find_element(By.XPATH,\n                                                                             '//div[text()=\"new org pref 1\"]//parent::div//parent::li//following-sibling::li[1]//child::div//'\n                                                                             'child::div[text()=\"MAHAVIR BEAUTY CENTER7b9c1f55-9d4d-4adf-b7ee-35e37f080858\"]')\n        highlight_element(CheckItemSelectionInDropDownAndCheckToastImage, driver)\n        actions = ActionChains(driver)\n        actions.move_to_element(CheckItemSelectionInDropDownAndCheckToastImage)\n        actions.perform()\n        time.sleep(3)\n        allure.attach(driver.get_screenshot_as_png(), name=\"checkToastMessageScreenshot\",\n                      attachment_type=allure.attachment_type.PNG)\n        highlight_element(CheckItemSelectionInDropDownAndCheckToastImage, driver)\n        CheckItemSelectionInDropDownAndCheckToastImage.click()\n    \n        time.sleep(3)\n        allure.attach(driver.get_screenshot_as_png(), name=\"CheckItemSelectionInDropDownandCheckToastImage\",\n                      attachment_type=allure.attachment_type.PNG)\n        driver.refresh()\n        time.sleep(5)\n    \n        CheckDropDownInMainPage = driver.find_element(By.XPATH, '//div[@class=\"p-dropdown-trigger\"]')\n        CheckDropDownInMainPage.click()\n        SelectingDifferentItemsInDropDown = driver.find_element(By.XPATH,\n                                                                '//div[text()=\"new organization 23\"]//parent::div//parent::li//following-sibling::li[1]//child::div//child::div[text()=\"Lotus Wireless Technologies India Pvt. Ltd -22-234eddc16a-7026-4ee1-986c-97bd04da935e\"]')\n        highlight_element(SelectingDifferentItemsInDropDown, driver)\n        SelectingDifferentItemsInDropDown.click()\n        time.sleep(3)\n        allure.attach(driver.get_screenshot_as_png(), name=\"clickLotuswirelessInDropDown\",\n                      attachment_type=allure.attachment_type.PNG)\n        driver.refresh()\n        time.sleep(10)\n    \n        TestingScrollDownInDropDown = driver.find_element(By.XPATH, '//div[@class=\"p-dropdown-trigger\"]')\n        TestingScrollDownInDropDown.click()\n    \n        Element = driver.find_element(By.XPATH, '//div[text()=\"legal name\"]')\n        driver.execute_script(\"arguments[0].scrollIntoView();\", Element)\n        time.sleep(3)\n        allure.attach(driver.get_screenshot_as_png(), name=\"TestingScrollDownInDropDown\",\n                      attachment_type=allure.attachment_type.PNG)\n        driver.refresh()\n        time.sleep(5)\n    \n        TestingScrollUpInDropDown = driver.find_element(By.XPATH, '//div[@class=\"p-dropdown-trigger\"]')\n        TestingScrollUpInDropDown.click()\n        Element = driver.find_element(By.XPATH, '//div[text()=\"Lotus Wireless Technologies India Pvt. Ltd -22-23\"]')\n        driver.execute_script(\"arguments[0].scrollIntoView();\", Element)\n        time.sleep(3)\n        allure.attach(driver.get_screenshot_as_png(), name=\"TestingScrollUpInDropDown\",\n                      attachment_type=allure.attachment_type.PNG)\n        driver.refresh()\n        time.sleep(5)\n    \n        CheckSearchBoxInDropDown = driver.find_element(By.XPATH, '//div[@class=\"p-dropdown-trigger\"]')\n        highlight_element(CheckSearchBoxInDropDown, driver)\n        CheckSearchBoxInDropDown.click()\n        CheckSearchBoxInDropDown = driver.find_element(By.XPATH,\n                                                       '//input[@placeholder=\"Search\" and @class=\"p-inputtext p-component form-control h-40px shadow-none\"]')\n        CheckSearchBoxInDropDown.send_keys(\"SREE BALAJII STORES\")\n        time.sleep(3)\n        allure.attach(driver.get_screenshot_as_png(), name=\"CheckSearchBoxInDropDown\",\n                      attachment_type=allure.attachment_type.PNG)\n        time.sleep(5)\n    \n        checkNewButtonInDropDown = driver.find_element(By.XPATH,\n                                                       '//button[@class=\"btn btn-outline-primary mt-0 font-size-12 btn-block b-r-3\"]')\n        highlight_element(checkNewButtonInDropDown, driver)\n        checkNewButtonInDropDown.click()\n        time.sleep(3)\n        allure.attach(driver.get_screenshot_as_png(), name=\"checkNewButtonInDropDown\",\n                      attachment_type=allure.attachment_type.PNG)\n        driver.refresh()\n        time.sleep(5)\n    \n        CheckingAllButtonsInNewOrgButtonInDropDown = driver.find_element(By.ID,\"PR_1\")\n        highlight_element(CheckingAllButtonsInNewOrgButtonInDropDown, driver)\n        CheckingAllButtonsInNewOrgButtonInDropDown.send_keys(\"Dinesh Pvt Ltd ....\")\n        time.sleep(3)\n        allure.attach(driver.get_screenshot_as_png(), name=\"checkNewButtonInDropDown\",\n                      attachment_type=allure.attachment_type.PNG)\n        time.sleep(5)\n    \n        CheckingAllButtonsInNewOrgButtonInDropDownDisplayName = driver.find_element(By.ID,\"PR_2\")\n        highlight_element(CheckingAllButtonsInNewOrgButtonInDropDownDisplayName, driver)\n        CheckingAllButtonsInNewOrgButtonInDropDownDisplayName.send_keys(\"Dinesh Pvt Ltd ....\")\n        time.sleep(3)\n        allure.attach(driver.get_screenshot_as_png(), name=\"CheckingAllButtonsInNewOrgButtonInDropDownDisplayName\",\n                      attachment_type=allure.attachment_type.PNG)\n        time.sleep(5)\n    \n        CheckingAllButtonsInNewOrgButtonInDropDowninDropDown = driver.find_element(By.ID,'PR_3')\n        highlight_element(CheckingAllButtonsInNewOrgButtonInDropDowninDropDown, driver)\n        CheckingAllButtonsInNewOrgButtonInDropDowninDropDown.click()\n        time.sleep(3)\n        allure.attach(driver.get_screenshot_as_png(), name=\"CheckingAllButtonsInNewOrgButtonInDropDowninDropDown\",\n                      attachment_type=allure.attachment_type.PNG)\n        time.sleep(5)\n    \n        # CheckingElementInDropDownInDropDown = driver.find_element(By.XPATH,'//input[@value=\"Hungary\" and @class=\"MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputSizeSmall MuiInputBase-inputAdornedEnd MuiAutocomplete-input MuiAutocomplete-inputFocused css-b52kj1\"]')\n        # highlight_element(CheckingElementInDropDownInDropDown, driver)\n        # CheckingElementInDropDownInDropDown.click()\n        # time.sleep(3)\n        # allure.attach(driver.get_screenshot_as_png(), name=\"CheckingElementInDropDownInDropDown\",\n        #               attachment_type=allure.attachment_type.PNG)\n        # time.sleep(5)\n    \n        checkGSTINNoDropDownNewOrg = driver.find_element(By.ID,\"PR_4\")\n        highlight_element(checkGSTINNoDropDownNewOrg, driver)\n        checkGSTINNoDropDownNewOrg.send_keys(\"1234567890\")\n        allure.attach(driver.get_screenshot_as_png(), name=\"checkGSTINNoDropDownNewOrg\",\n                      attachment_type=allure.attachment_type.PNG)\n        time.sleep(5)\n    \n        checkDropDown2inDropDown = driver.find_element(By.XPATH,'(//i[@class=\"fi fi-ss-angle-small-down font-size-18\"]'\n                                                                '//parent::button[@class= \"MuiButtonBase-root MuiIconButton-root MuiIconButton-sizeMedium'\n                                                                ' MuiAutocomplete-popupIndicator css-uge3vf\"])[2]')\n        highlight_element(checkDropDown2inDropDown, driver)\n        checkDropDown2inDropDown.click()\n        allure.attach(driver.get_screenshot_as_png(), name=\"checkDropDown2inDropDown\",\n                      attachment_type=allure.attachment_type.PNG)\n        time.sleep(5)\n    \n        checkEmailInNewOrgInDropDown = driver.find_element(By.ID,\"PR_6\")\n        highlight_element(checkEmailInNewOrgInDropDown, driver)\n        checkEmailInNewOrgInDropDown.send_keys(\"dineshkumar.pentakota@gmail.com\")\n        time.sleep(3)\n        allure.attach(driver.get_screenshot_as_png(), name=\"checkEmailInNewOrgInDropDown\",\n                      attachment_type=allure.attachment_type.PNG)\n        time.sleep(5)\n    \n        checkADDAddressInNewOrgInDropDown = driver.find_element(By.ID,\"ADDADRS\")\n        highlight_element(checkADDAddressInNewOrgInDropDown, driver)\n        checkADDAddressInNewOrgInDropDown.click()\n        time.sleep(3)\n        allure.attach(driver.get_screenshot_as_png(), name=\"checkADDAddressInNewOrgInDropDown\",\n                      attachment_type=allure.attachment_type.PNG)\n        time.sleep(5)\n    \n        switchingToPopUpWindowToADDAddress = driver.window_handles[-1]\n        driver.switch_to.window(switchingToPopUpWindowToADDAddress)\n        allure.attach(driver.get_screenshot_as_png(), name=\"switchingToPopUpWindowToADDAddress\",\n                      attachment_type=allure.attachment_type.PNG)\n        time.sleep(3)\n        driver.find_element(By.ID,\"ADDRESS_NEW\").click()\n        allure.attach(driver.get_screenshot_as_png(), name=\"switchingToPopUpWindowToADDAddress\",\n                      attachment_type=allure.attachment_type.PNG)\n    \n        checkPrefrencesInNewOrgInDropDown = driver.find_element(By.XPATH,'//span[text()=\"ALT + 1\"]')\n        highlight_element(checkPrefrencesInNewOrgInDropDown, driver)\n>       checkPrefrencesInNewOrgInDropDown.click()\n\nKitaabDesktop\\MainPage.py:235: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D8405FD610>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...dInitThunk [0x76947BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77EBB79B+107]\\\\n\\\\tRtlClearBits [0x77EBB71F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"key-switch\" style=\"\">...</span> is not clickable at point (1200, 263). Other element would receive the click: <div class=\"p-rel\">...</div>\nE         (Session info: chrome=116.0.5845.188)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00A937C3+48947]\nE       \t(No symbol) [0x00A28551]\nE       \t(No symbol) [0x0092C92D]\nE       \t(No symbol) [0x0095E276]\nE       \t(No symbol) [0x0095CF4D]\nE       \t(No symbol) [0x0095B74B]\nE       \t(No symbol) [0x0095ABA5]\nE       \t(No symbol) [0x00953420]\nE       \t(No symbol) [0x0097508C]\nE       \t(No symbol) [0x00952EB6]\nE       \t(No symbol) [0x009753E4]\nE       \t(No symbol) [0x009875DA]\nE       \t(No symbol) [0x00974E86]\nE       \t(No symbol) [0x009516C7]\nE       \t(No symbol) [0x0095284D]\nE       \tGetHandleVerifier [0x00CDFDF9+2458985]\nE       \tGetHandleVerifier [0x00D2744F+2751423]\nE       \tGetHandleVerifier [0x00D21361+2726609]\nE       \tGetHandleVerifier [0x00B10680+560624]\nE       \t(No symbol) [0x00A3238C]\nE       \t(No symbol) [0x00A2E268]\nE       \t(No symbol) [0x00A2E392]\nE       \t(No symbol) [0x00A210B7]\nE       \tBaseThreadInitThunk [0x76947BA9+25]\nE       \tRtlInitializeExceptionChain [0x77EBB79B+107]\nE       \tRtlClearBits [0x77EBB71F+191]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "CheckDropDownInMainPage", "source": "240edb81-088e-4c97-845e-b5d53f90e360-attachment.png", "type": "image/png"}, {"name": "checkToastMessageScreenshot", "source": "ce90f9f5-3c78-4f26-b5a8-08d76c57cf2a-attachment.png", "type": "image/png"}, {"name": "CheckItemSelectionInDropDownandCheckToastImage", "source": "6d113fcc-7e83-40b6-9f8e-da0150eea4ac-attachment.png", "type": "image/png"}, {"name": "clickLotuswirelessInDropDown", "source": "9a39efab-071a-4588-b79f-efdf0dd2d79a-attachment.png", "type": "image/png"}, {"name": "TestingScrollDownInDropDown", "source": "d2f60ae7-9105-410a-9778-f0a0a1b0fe93-attachment.png", "type": "image/png"}, {"name": "TestingScrollUpInDropDown", "source": "7efcbf4f-5ac6-44dc-a9a5-a8fe80400985-attachment.png", "type": "image/png"}, {"name": "CheckSearchBoxInDropDown", "source": "9b10e403-e030-47ea-9a75-ee41a638d29b-attachment.png", "type": "image/png"}, {"name": "checkNewButtonInDropDown", "source": "0aa0b2db-7421-4245-be59-5bc7b9aae8e3-attachment.png", "type": "image/png"}, {"name": "checkNewButtonInDropDown", "source": "75e42c3e-620a-4dc5-83aa-da54425538c1-attachment.png", "type": "image/png"}, {"name": "CheckingAllButtonsInNewOrgButtonInDropDownDisplayName", "source": "25932c85-21a6-456d-99fc-452d2c8a2d3e-attachment.png", "type": "image/png"}, {"name": "CheckingAllButtonsInNewOrgButtonInDropDowninDropDown", "source": "719d23cd-a05f-4b9a-bfba-7b6a9aced2e3-attachment.png", "type": "image/png"}, {"name": "checkGSTINNoDropDownNewOrg", "source": "e7cb8eb7-3624-45cc-aadc-8d10fcef9e66-attachment.png", "type": "image/png"}, {"name": "checkDropDown2inDropDown", "source": "20113e9c-fc0d-486b-abfb-a7516a62884c-attachment.png", "type": "image/png"}, {"name": "checkEmailInNewOrgInDropDown", "source": "1cd6dd3a-d5fd-4b02-8af0-d786ad78faaf-attachment.png", "type": "image/png"}, {"name": "checkADDAddressInNewOrgInDropDown", "source": "b166bcee-3ad0-41c9-bac1-7db586f5ae1a-attachment.png", "type": "image/png"}, {"name": "switchingToPopUpWindowToADDAddress", "source": "435a1cf7-5c00-4862-98ba-1f85357e9df5-attachment.png", "type": "image/png"}, {"name": "switchingToPopUpWindowToADDAddress", "source": "d9f29ba8-bfbc-4402-9808-72f39d44ca65-attachment.png", "type": "image/png"}], "start": 1695717509904, "stop": 1695717664247, "uuid": "a4f43ea1-34fc-4319-aa02-63c4d63e7ab7", "historyId": "fba186662cbd6a09c553f362c0c036bf", "testCaseId": "fba186662cbd6a09c553f362c0c036bf", "fullName": "KitaabDesktop.MainPage.TestMainPage#test_CheckDropDownInMainPage", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "order3"}, {"name": "parentSuite", "value": "KitaabDesktop"}, {"name": "suite", "value": "MainPage"}, {"name": "subSuite", "value": "TestMainPage"}, {"name": "host", "value": "9599-IT-dinesh"}, {"name": "thread", "value": "22092-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "KitaabDesktop.MainPage"}]}